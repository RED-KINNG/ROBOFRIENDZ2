{"version":3,"sources":["components/Card.js","components/CardList.js","components/Scroll.js","components/SearchBox.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","username","className","src","alt","CardList","robots","cardComponent","map","user","i","key","Scroll","props","style","overflow","border","height","children","SearchBox","searchfield","searchChange","type","placeholder","onChange","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"oOAqBeA,EAnBF,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,GAAIC,EAAc,EAAdA,SAG5B,OACI,yBAAKC,UAAW,oDACZ,yBAAKC,IAAG,+BAA2BH,EAA3B,YAAyCI,IAAK,WAEtD,6BACI,4BAAKN,GACL,2BAAIC,GACJ,2BAAIE,MCcLI,EArBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACTC,EAAgBD,EAAOE,KAAK,SAACC,EAAMC,GACjC,OAAS,kBAAC,EAAD,CACDC,IAAMD,EACNV,GAAKM,EAAOI,GAAGV,GACfF,KAAMQ,EAAOI,GAAGZ,KAChBG,SAAUK,EAAOI,GAAGT,SACpBF,MAAOO,EAAOI,GAAGX,WAKjC,OACI,6BACEQ,ICNKK,EAXA,SAACC,GACZ,OACI,yBAAKC,MAAS,CAAEC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UACtEJ,EAAMK,WCaAC,EAhBG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC7B,OAEI,yBAAKnB,UAAU,OACX,2BACAA,UAAU,mCACVoB,KAAM,SACNC,YAAY,gBACZC,SAAUH,MCoBPI,E,kDAzBX,WAAYZ,GAAQ,IAAD,8BACf,cAAMA,IACDa,MAAO,CACRC,UAAU,GAHC,E,8DAQDC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAKzB,OAAIG,KAAKJ,MAAMC,SACJ,+CAGAG,KAAKjB,MAAMK,a,GAnBFc,aC2EZC,G,wDAlEZ,aAAe,IAAD,8BACV,gBA4BJC,eAAgB,SAACC,GACb,EAAKJ,SAAS,CAACX,YAAae,EAAMC,OAAOC,SA5BzC,EAAKX,MAAQ,CACTpB,OAAQ,GACRc,YAAY,IAJN,E,gEAsBM,IAAD,OACfkB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKX,SAAS,CAACzB,OAAQoC,S,+BAU/B,IAAD,OAGAC,EAAiBb,KAAKJ,MAAMpB,OAAOsC,QAAO,SAAAC,GAC5C,OAAOA,EAAM/C,KAAKgD,cAAcC,SAAS,EAAKrB,MAAMN,YAAY0B,kBAGpE,OAAgC,IAA5BhB,KAAKJ,MAAMpB,OAAO0C,OACX,8CAKH,yBAAK9C,UAAW,MAChB,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWmB,aAAeS,KAAKI,iBAE/B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAU5B,OAASqC,W,GAvDzBX,cCAEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCRNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SDyH1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAnC,GACLoC,QAAQpC,MAAMA,EAAMqC,a","file":"static/js/main.5ee66406.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, email, id, username}) => {\r\n\r\n   \r\n    return (\r\n        <div className= 'bg-light-blue dib br3 pa2 ma2 grow bw2 shadow tc'>\r\n            <img src= {`https://robohash.org/${id} 200*200`} alt= 'robots' />\r\n\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n                <p>{username}</p>\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card.js';\r\n\r\n\r\n\r\nconst CardList = ({robots}) => {\r\n    const cardComponent = robots.map ((user, i) => {\r\n            return(  <Card \r\n                    key= {i} \r\n                    id= {robots[i].id} \r\n                    name={robots[i].name} \r\n                    username={robots[i].username} \r\n                    email={robots[i].email}/>\r\n            );\r\n    }\r\n    )\r\n\r\n    return(\r\n        <div>\r\n         {cardComponent}\r\n        </div>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style = {{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\r\n        {props.children}\r\n        </div>\r\n\r\n    );\r\n\r\n\r\n};\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n    return (\r\n\r\n        <div className='pa2'> \r\n            <input \r\n            className='pa3 ba b--green bg-lightest-blue'\r\n            type ='search' \r\n            placeholder='search robots'\r\n            onChange={searchChange}\r\n            />\r\n           \r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default SearchBox;","import React, {Component} from 'react';\r\n// import { render } from '@testing-library/react';\r\n\r\n\r\nclass ErrorBoundary extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state= {\r\n            hasError: false\r\n        }\r\n\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({hasError: true})\r\n    }\r\n\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Stockton Bleep!</h1>\r\n        }else{\r\n\r\n            return this.props.children\r\n        }\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default ErrorBoundary;\r\n","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\n// import {robots} from './robots';\nimport Scroll from '../components/Scroll';\nimport SearchBox from '../components/SearchBox';\n// import { render } from '@testing-library/react';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport './App.css'\n\n\n\n\nclass App extends Component {\n    constructor() {\n        super()\n        this.state = {\n            robots: [], \n            searchfield:''\n        }\n                                    // robots here are the users and pulled from robots.js as soon as app starts \n        // console.log('constructor');                            \n    }\n\n    // componentDidMount(){\n    //     fetch('https://jsonplaceholder.typicode.com/users')\n    //     .then(response=>{\n    //         return response.json();\n    //     })\n    //     .then(users=> {\n    //     this.setState({robots:users})\n    //     });\n        \n    //     // console.log('componentDidMount');\n    // }\n    // SIMPLIFIED COMPONENTDIDMOUNT\n    componentDidMount(){\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(users => this.setState({robots: users}));\n\n    }\n\n    onSearchChange =(event)=> {\n        this.setState({searchfield: event.target.value})\n        \n        // console.log(filteredRobots);\n    }\n\n    render () { \n        // const{robots, searchfield}= this.state; (to destructure,then remove this , state below)\n\n        const filteredRobots = this.state.robots.filter(robot => {\n            return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\n        })\n        // console.log('render');\n        if (this.state.robots.length=== 0) {  \n            return <h1>Loading Bleep!</h1>\n                                // can also convert to ternary statement as return !robots.length?\n        } else{\n        \n            return (\n                <div className= 'tc'>\n                <h1 className='f2'>RoboFriendz</h1>\n                <SearchBox searchChange ={this.onSearchChange}/>\n                \n                <Scroll>\n                    <ErrorBoundary>\n                        <CardList robots= {filteredRobots}/>\n                    </ErrorBoundary>\n                \n                </Scroll>\n                \n            \n                </div>   \n            );\n        }\n    }    \n}   \n\n export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import Card from './Card.js'; not needed in this component!\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n// import {robots} from './robots'\n\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}